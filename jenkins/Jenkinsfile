pipeline {
    agent any

    environment {
        TF_VAR_admin_password = "Ap20120805877"
        TF_VAR_domain_name    = "manikonda.ca"
    }

    stages {
        // Recommended Fix 1: Add an explicit Checkout stage
        stage('Checkout SCM') {
            steps {
                // This ensures Jenkins explicitly checks out the repository content
                // into the workspace before any other operations.
                checkout scm
            }
        }

        stage('Terraform Operations') {
            steps {
                script {
                    // IMPORTANT: Removed 'dir('multi-region-dr')' because your .tf files
                    // are at the root of the checked-out repository.
                    withCredentials([azureServicePrincipal('azure-sp-creds')]) {

                        // Recommended Fix 3: Use withEnv for secrets to avoid Groovy string interpolation warning
                        withEnv([
                            "ARM_CLIENT_ID=${AZURE_CLIENT_ID}",
                            "ARM_CLIENT_SECRET=${AZURE_CLIENT_SECRET}",
                            "ARM_TENANT_ID=${AZURE_TENANT_ID}",
                            "ARM_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}"
                        ]) {
                            // Recommended Fix 2: Optional debug command to list directory contents
                            // This will now list files at the root of the workspace
                            sh 'ls -la'

                            // Terraform Init command:
                            sh """
                                terraform init \\
                                    -backend-config="resource_group_name=tfstate-manikonda-rg-unique" \\
                                    -backend-config="storage_account_name=tfstatemanikonda01" \\
                                    -backend-config="container_name=tfstate" \\
                                    -backend-config="key=multi-region-dr.tfstate"
                            """
                        }

                        // Recommended Fix 3: Use withEnv for secrets in Terraform Plan
                        withEnv([
                            "ARM_CLIENT_ID=${AZURE_CLIENT_ID}",
                            "ARM_CLIENT_SECRET=${AZURE_CLIENT_SECRET}",
                            "ARM_TENANT_ID=${AZURE_TENANT_ID}",
                            "ARM_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}"
                        ]) {
                            // Terraform Plan command:
                            sh """
                                terraform plan -out=tfplan \\
                                    -var "subscription_id=${AZURE_SUBSCRIPTION_ID}" \\
                                    -var "tenant_id=${AZURE_TENANT_ID}" \\
                                    -var "client_id=${AZURE_CLIENT_ID}" \\
                                    -var "client_secret=${AZURE_CLIENT_SECRET}"
                            """
                        }

                        // User input for approval before apply
                        def userInput = input(id: 'proceed', message: 'Proceed with Terraform Apply?', ok: 'Apply')
                        if (userInput) { // Check if the boolean 'true' was returned
                            // Recommended Fix 3: Use withEnv for secrets in Terraform Apply
                            withEnv([
                                "ARM_CLIENT_ID=${AZURE_CLIENT_ID}",
                                "ARM_CLIENT_SECRET=${AZURE_CLIENT_SECRET}",
                                "ARM_TENANT_ID=${AZURE_TENANT_ID}",
                                "ARM_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}"
                            ]) {
                                sh 'terraform apply -auto-approve tfplan'
                            }
                        } else {
                            error('Terraform apply cancelled by user.')
                        }
                    }
                }
            }
        }
    }
    // The 'post' block MUST be here, directly under 'pipeline',
    // at the same indentation level as 'environment' and 'stages'.
    post {
        always {
            script {
                // IMPORTANT: Removed 'dir('multi-region-dr')' for cleanup as tfplan is at root.
                sh 'rm -f tfplan'
            }
        }
        success {
            echo 'Terraform deployment successful!'
        }
        failure {
            echo 'Terraform deployment failed!'
        }
    }
}
