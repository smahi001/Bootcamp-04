pipeline {
    agent any

    // Define global environment variables for sensitive data.
    // In a production scenario, these would ideally come from a secure secret store (e.g., Azure Key Vault).
    environment {
        TF_VAR_admin_password = "Ap20120805877" // !! IMPORTANT: Ensure this is your actual strong password !!
        TF_VAR_domain_name    = "manikonda.ca"
    }

    stages {
        // Stage 1: Explicitly check out the source code
        // This ensures the workspace is populated with the latest code from Git.
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        // Stage 2: Perform Terraform operations (init, plan, apply)
        stage('Terraform Operations') {
            steps {
                script {
                    // Use withCredentials to inject Azure Service Principal credentials as environment variables.
                    // The 'azure-sp-creds' ID must match the ID configured in Jenkins Credentials.
                    withCredentials([azureServicePrincipal('azure-sp-creds')]) {

                        // Use withEnv to securely pass ARM_ prefixed environment variables to Terraform.
                        // This avoids Groovy string interpolation warnings and ensures Terraform authenticates correctly.
                        withEnv([
                            "ARM_CLIENT_ID=${AZURE_CLIENT_ID}",
                            "ARM_CLIENT_SECRET=${AZURE_CLIENT_SECRET}",
                            "ARM_TENANT_ID=${AZURE_TENANT_ID}",
                            "ARM_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}"
                        ]) {
                            // Debugging step: List contents of the current directory.
                            // This helps verify that Terraform configuration files are present.
                            // Your .tf files are at the root of the checked-out repository.
                            sh 'ls -la'

                            // Terraform Init: Initializes the working directory, downloads providers, and sets up the backend.
                            sh """
                                terraform init \\
                                    -backend-config="resource_group_name=tfstate-manikonda-rg-unique" \\
                                    -backend-config="storage_account_name=tfstatemanikonda01" \\
                                    -backend-config="container_name=tfstate" \\
                                    -backend-config="key=multi-region-dr.tfstate"
                            """

                            // Terraform Plan: Creates an execution plan, showing what changes will be made.
                            // The plan is saved to 'tfplan' file for the apply step.
                            sh """
                                terraform plan -out=tfplan \\
                                    -var "subscription_id=${AZURE_SUBSCRIPTION_ID}" \\
                                    -var "tenant_id=${AZURE_TENANT_ID}" \\
                                    -var "client_id=${AZURE_CLIENT_ID}" \\
                                    -var "client_secret=${AZURE_CLIENT_SECRET}"
                            """

                            // Terraform Apply: Automatically applies the changes defined in the 'tfplan' file.
                            // The manual approval step has been removed for auto-approval.
                            sh 'terraform apply -auto-approve tfplan'
                        } // End of withEnv for Terraform commands
                    } // End of withCredentials
                } // End of script
            } // End of steps
        } // End of stage 'Terraform Operations'
    } // End of stages

    // Post Actions: Define actions to run after the main stages complete, regardless of success or failure.
    // This 'post' block must be a direct child of the 'pipeline' block.
    post {
        always {
            script {
                // Cleanup: Remove the generated tfplan file.
                sh 'rm -f tfplan'
            }
        }
        success {
            echo 'Terraform deployment successful!'
        }
        failure {
            echo 'Terraform deployment failed!'
        }
    }
}
